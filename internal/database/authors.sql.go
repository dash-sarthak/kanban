// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: authors.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (id, name, username, password)
VALUES ($1, $2, $3, $4)
RETURNING id, name, username, created_at, updated_at, password
`

type CreateAuthorParams struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Username string    `json:"username"`
	Password string    `json:"password"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor,
		arg.ID,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Password,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :one
DELETE FROM authors
WHERE username = $1 and password = $2
RETURNING username
`

type DeleteAuthorParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) DeleteAuthor(ctx context.Context, arg DeleteAuthorParams) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteAuthor, arg.Username, arg.Password)
	var username string
	err := row.Scan(&username)
	return username, err
}

const getAuthorID = `-- name: GetAuthorID :one
SELECT id FROM authors
WHERE username =  $1
`

func (q *Queries) GetAuthorID(ctx context.Context, username string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getAuthorID, username)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getAuthors = `-- name: GetAuthors :many
SELECT id, name, username, created_at, updated_at, password FROM authors
`

func (q *Queries) GetAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, getAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
