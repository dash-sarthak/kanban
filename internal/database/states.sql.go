// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: states.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createState = `-- name: CreateState :one
INSERT INTO states (id, name, project)
VALUES ($1, $2, $3)
RETURNING id, name, project, created_at, updated_at
`

type CreateStateParams struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Project uuid.UUID `json:"project"`
}

func (q *Queries) CreateState(ctx context.Context, arg CreateStateParams) (State, error) {
	row := q.db.QueryRowContext(ctx, createState, arg.ID, arg.Name, arg.Project)
	var i State
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Project,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStatesByProject = `-- name: GetStatesByProject :many
SELECT id, name, project, created_at, updated_at FROM states
WHERE project = $1
`

func (q *Queries) GetStatesByProject(ctx context.Context, project uuid.UUID) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, getStatesByProject, project)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []State{}
	for rows.Next() {
		var i State
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Project,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
